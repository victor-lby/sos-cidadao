name: Backend Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'api/**'
      - '.github/workflows/test-backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'api/**'
      - '.github/workflows/test-backend.yml'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_DATABASE: sos_cidadao_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      rabbitmq:
        image: rabbitmq:3-management-alpine
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "curl -f http://localhost:15672/api/overview || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'api/requirements.txt'
        
    - name: Install dependencies
      run: |
        cd api
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist pytest-mock
        
    - name: Wait for services
      run: |
        # Wait for MongoDB
        timeout 60 bash -c 'until mongosh --eval "db.runCommand({ping: 1})" > /dev/null 2>&1; do sleep 2; done'
        
        # Wait for Redis
        timeout 60 bash -c 'until redis-cli ping > /dev/null 2>&1; do sleep 2; done'
        
        # Wait for RabbitMQ
        timeout 120 bash -c 'until curl -f http://localhost:15672/api/overview > /dev/null 2>&1; do sleep 5; done'
        
    - name: Setup test environment
      run: |
        cd api
        export ENVIRONMENT=test
        export MONGODB_URI=mongodb://localhost:27017/sos_cidadao_test
        export REDIS_URL=redis://localhost:6379
        export AMQP_URL=amqp://guest:guest@localhost:5672/
        export JWT_SECRET=test-secret-key-for-ci
        export OTEL_ENABLED=false
        export DOCS_ENABLED=false
        
    - name: Run unit tests
      run: |
        cd api
        pytest tests/ \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --junitxml=test-results.xml \
          -v \
          --tb=short
      env:
        ENVIRONMENT: test
        MONGODB_URI: mongodb://localhost:27017/sos_cidadao_test
        REDIS_URL: redis://localhost:6379
        AMQP_URL: amqp://guest:guest@localhost:5672/
        JWT_SECRET: test-secret-key-for-ci
        OTEL_ENABLED: false
        DOCS_ENABLED: false
        
    - name: Run integration tests
      run: |
        cd api
        pytest tests/test_*_endpoints.py \
          --cov-append \
          --junitxml=integration-test-results.xml \
          -v \
          --tb=short \
          -m "not e2e"
      env:
        ENVIRONMENT: test
        MONGODB_URI: mongodb://localhost:27017/sos_cidadao_test
        REDIS_URL: redis://localhost:6379
        AMQP_URL: amqp://guest:guest@localhost:5672/
        JWT_SECRET: test-secret-key-for-ci
        OTEL_ENABLED: false
        DOCS_ENABLED: false
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./api/coverage.xml
        flags: backend
        name: backend-coverage
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          api/test-results.xml
          api/integration-test-results.xml
          api/htmlcov/
        retention-days: 30
        
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const coverage = fs.readFileSync('api/coverage.xml', 'utf8');
            const match = coverage.match(/line-rate="([0-9.]+)"/);
            if (match) {
              const percentage = Math.round(parseFloat(match[1]) * 100);
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `📊 **Backend Test Coverage: ${percentage}%**\n\n` +
                      `${percentage >= 80 ? '✅' : '❌'} Coverage ${percentage >= 80 ? 'meets' : 'below'} minimum threshold (80%)`
              });
            }
          } catch (error) {
            console.log('Could not read coverage file:', error.message);
          }