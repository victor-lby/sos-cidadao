services:
  # Infrastructure Services
  mongodb:
    image: mongo:7
    container_name: sos-cidadao-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: sos_cidadao_dev
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./infra/docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - sos-cidadao-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: sos-cidadao-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sos-cidadao-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: sos-cidadao-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - sos-cidadao-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  jaeger:
    image: jaegertracing/all-in-one:1.60
    container_name: sos-cidadao-jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686" # Jaeger UI
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    networks:
      - sos-cidadao-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Application Services
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: sos-cidadao-api
    restart: unless-stopped
    env_file:
      - .env.development
    ports:
      - "8000:5000"
    volumes:
      - ./api:/app
      - /app/__pycache__  # Exclude pycache from volume mount
    networks:
      - sos-cidadao-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/api/healthz')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sos-cidadao-frontend
    restart: unless-stopped
    environment:
      # Vite configuration
      VITE_API_BASE_URL: https://api.sos-cidadao.orb.local
      VITE_APP_TITLE: "S.O.S Cidad√£o - Development"
      NODE_ENV: development
    ports:
      - "3005:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Exclude node_modules from volume mount
    networks:
      - sos-cidadao-network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  mongodb_data:
  redis_data:
  rabbitmq_data:

networks:
  sos-cidadao-network:
    driver: bridge